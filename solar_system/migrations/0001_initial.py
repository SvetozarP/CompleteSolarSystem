# Generated by Django 4.2.23 on 2025-06-30 17:47

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Planet",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Official name of the celestial body",
                        max_length=50,
                        unique=True,
                    ),
                ),
                (
                    "display_order",
                    models.IntegerField(
                        help_text="Order for display (1=Mercury, 2=Venus, etc.)",
                        unique=True,
                    ),
                ),
                (
                    "planet_type",
                    models.CharField(
                        choices=[
                            ("terrestrial", "Terrestrial Planet"),
                            ("gas_giant", "Gas Giant"),
                            ("ice_giant", "Ice Giant"),
                            ("dwarf_planet", "Dwarf Planet"),
                        ],
                        default="terrestrial",
                        help_text="Classification of the planet",
                        max_length=20,
                    ),
                ),
                (
                    "distance_from_sun",
                    models.FloatField(
                        help_text="Average distance from sun in Astronomical Units (AU)",
                        validators=[django.core.validators.MinValueValidator(0.1)],
                    ),
                ),
                (
                    "diameter",
                    models.FloatField(
                        help_text="Diameter in kilometers",
                        validators=[django.core.validators.MinValueValidator(100)],
                    ),
                ),
                (
                    "mass",
                    models.FloatField(
                        blank=True,
                        help_text="Mass relative to Earth (Earth = 1.0)",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0.001)],
                    ),
                ),
                (
                    "orbital_period",
                    models.FloatField(
                        help_text="Time to orbit sun in Earth days",
                        validators=[django.core.validators.MinValueValidator(0.1)],
                    ),
                ),
                (
                    "orbital_eccentricity",
                    models.FloatField(
                        default=0.0,
                        help_text="Orbital eccentricity (0 = perfect circle, >0 = elliptical)",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "rotation_period",
                    models.FloatField(
                        help_text="Rotation period in hours",
                        validators=[django.core.validators.MinValueValidator(0.1)],
                    ),
                ),
                (
                    "axial_tilt",
                    models.FloatField(
                        default=0.0,
                        help_text="Axial tilt in degrees",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(180.0),
                        ],
                    ),
                ),
                (
                    "composition",
                    models.TextField(
                        help_text="Primary composition and notable characteristics"
                    ),
                ),
                (
                    "atmosphere",
                    models.TextField(
                        blank=True, help_text="Atmospheric composition (if any)"
                    ),
                ),
                (
                    "color_hex",
                    models.CharField(
                        default="#888888",
                        help_text="Hex color code for basic rendering (e.g., #FF6B47)",
                        max_length=7,
                    ),
                ),
                (
                    "texture_filename",
                    models.CharField(
                        blank=True,
                        help_text="Filename for planet texture (without path)",
                        max_length=100,
                    ),
                ),
                (
                    "albedo",
                    models.FloatField(
                        default=0.3,
                        help_text="Surface reflectivity (0 = black, 1 = perfect reflector)",
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                (
                    "is_dwarf_planet",
                    models.BooleanField(
                        default=False, help_text="Is this classified as a dwarf planet?"
                    ),
                ),
                (
                    "has_rings",
                    models.BooleanField(
                        default=False, help_text="Does this planet have ring systems?"
                    ),
                ),
                (
                    "has_moons",
                    models.BooleanField(
                        default=False,
                        help_text="Does this planet have natural satellites?",
                    ),
                ),
                (
                    "moon_count",
                    models.IntegerField(
                        default=0,
                        help_text="Number of known moons",
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Should this planet be displayed in the simulation?",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Planet",
                "verbose_name_plural": "Planets",
                "ordering": ["display_order"],
            },
        ),
    ]
